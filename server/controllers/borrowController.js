import * as BorrowModel from '../models/borrowModel.js';
import { saveBase64Image } from '../utils/saveBase64Image.js';
import User from '../models/userModel.js';
import { sendLineNotify } from '../utils/lineNotify.js';

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÉ‡∏´‡∏°‡πà
export const createBorrow = async (req, res) => {
  console.log('==== [API] POST /api/borrows ====');
  console.log('payload:', req.body);
  const { user_id, reason, borrow_date, return_date, items, purpose } = req.body;
  // items = [{ item_id, quantity, note }]
  if (!user_id || !borrow_date || !return_date || !Array.isArray(items) || items.length === 0) {
    return res.status(400).json({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
  }
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö item_id ‡πÉ‡∏ô items ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠ undefined
  const invalidItem = items.find(item => !item.item_id);
  if (invalidItem) {
    return res.status(400).json({ message: 'item_id ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á' });
  }
  // ‡∏™‡∏∏‡πà‡∏° borrow_code
  function generateBorrowCode() {
    const random = Math.floor(1000 + Math.random() * 9000);
    return `BR-${random}`;
  }
  const borrow_code = generateBorrowCode();
  // ‡∏•‡∏ö logic ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ã‡πâ‡∏≥ (findByBorrowCode)
  try {
    const borrow_id = await BorrowModel.createBorrowTransaction(user_id, reason, borrow_date, return_date, borrow_code, purpose);
    for (const item of items) {
      await BorrowModel.addBorrowItem(borrow_id, item.item_id, item.quantity || 1, item.note || null);
    }
    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡πÑ‡∏õ‡∏¢‡∏±‡∏á admin ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• borrow ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á)
      const borrow = await BorrowModel.getBorrowById(borrow_id);
      const equipmentList = borrow.equipment.map(eq =>
        `‚Ä¢ ${eq.name} (${eq.item_code}) x${eq.quantity}`
      ).join('\n');
      const flexMessage = {
        type: 'flex',
        altText: 'üì¢ ‡∏î‡πà‡∏ß‡∏ô! ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
        contents: {
          type: 'bubble',
          size: 'mega',
          header: {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'text',
                text: 'üö® ‡∏î‡πà‡∏ß‡∏ô! ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡πÉ‡∏´‡∏°‡πà',
                weight: 'bold',
                size: 'xl',
                color: '#ffffff',
                align: 'center',
                margin: 'md',
              }
            ],
            backgroundColor: '#00B900', // LINE green
            paddingAll: '20px',
          },
          body: {
            type: 'box',
            layout: 'vertical',
            spacing: 'md',
            backgroundColor: '#ffffff',
            borderColor: '#e0e0e0',
            borderWidth: '2px',
            cornerRadius: 'lg',
            contents: [
              {
                type: 'text',
                text: '‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà',
                weight: 'bold',
                size: 'md',
                color: '#00B900',
                align: 'center',
                margin: 'md',
              },
              { type: 'separator', margin: 'md' },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                  { type: 'text', text: borrow.borrow_code || '-', size: 'sm', color: '#222222', flex: 4, weight: 'bold' }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                  { type: 'text', text: borrow.borrower?.name || '-', size: 'sm', color: '#222222', flex: 4 }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á', size: 'sm', color: '#888888', flex: 2 },
                  { type: 'text', text: borrow.borrower?.position || '-', size: 'sm', color: '#222222', flex: 4 }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏™‡∏≤‡∏Ç‡∏≤', size: 'sm', color: '#888888', flex: 2 },
                  { type: 'text', text: borrow.borrower?.department || '-', size: 'sm', color: '#222222', flex: 4 }
                ]
              },
              { type: 'separator', margin: 'md' },
              {
                type: 'text',
                text: 'üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå',
                size: 'sm',
                color: '#00B900',
                weight: 'bold',
                margin: 'md',
              },
              {
                type: 'text',
                text: equipmentList,
                size: 'sm',
                color: '#222222',
                wrap: true
              },
              { type: 'separator', margin: 'md' },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2 },
                  { type: 'text', text: borrow.borrow_date || '-', size: 'sm', color: '#222222', flex: 4 }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                  { type: 'text', text: borrow.due_date || '-', size: 'sm', color: '#d32f2f', flex: 4, weight: 'bold' }
                ]
              }
            ]
          },
          footer: {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'button',
                style: 'primary',
                color: '#00B900',
                action: {
                  type: 'uri',
                  label: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                  uri: 'https://your-system-url/borrows/' + borrow.borrow_code // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô url ‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
                }
              }
            ]
          }
        }
      };
      // ‡∏™‡πà‡∏á LINE Notify ‡πÑ‡∏õ‡∏¢‡∏±‡∏á admin ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
      const admins = await User.getAdmins();
      for (const admin of admins) {
        if (admin.line_id) {
          await sendLineNotify(admin.line_id, flexMessage);
        }
      }
    } catch (notifyErr) {
      console.error('Error sending LINE notify to admin:', notifyErr);
    }
    res.status(201).json({ borrow_id, borrow_code });
  } catch (err) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô createBorrow:', err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: err.message });
  }
};

// ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const getAllBorrows = async (req, res) => {
  try {
    const rows = await BorrowModel.getAllBorrows();
    res.json(rows);
  } catch (err) {
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: err.message });
  }
};

// ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° (‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå)
export const getBorrowById = async (req, res) => {
  const { id } = req.params;
  try {
    const borrow = await BorrowModel.getBorrowById(id);
    if (!borrow) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    res.json(borrow);
  } catch (err) {
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: err.message });
  }
};

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
export const updateBorrowStatus = async (req, res) => {
  const { id } = req.params;
  const { status, rejection_reason, signature_image } = req.body;
  try {
    let signaturePath = null;
    if (signature_image) {
      if (typeof signature_image === 'string' && signature_image.startsWith('data:image/')) {
        signaturePath = await saveBase64Image(signature_image);
      } else {
        signaturePath = signature_image; // already a path
      }
    }
    const affectedRows = await BorrowModel.updateBorrowStatus(id, status, rejection_reason, signaturePath);

    // === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ: ‡πÅ‡∏à‡πâ‡∏á user ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô pending_approval ===
    if (status === 'pending_approval') {
      const borrow = await BorrowModel.getBorrowById(id);
      const equipmentList = borrow.equipment.map(eq =>
        `‚Ä¢ ${eq.name} (${eq.item_code}) x${eq.quantity}`
      ).join('\n');
      // ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ executive (‡πÄ‡∏î‡∏¥‡∏°)
      const flexMessageExecutive = {
        type: 'flex',
        altText: 'üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£: ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÉ‡∏´‡∏°‡πà',
        contents: {
          type: 'bubble',
          size: 'mega',
          header: {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'text',
                text: 'üìù ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°',
                weight: 'bold',
                size: 'xl',
                color: '#ffffff',
                align: 'center',
                margin: 'md',
              }
            ],
            backgroundColor: '#1976D2',
            paddingAll: '20px',
          },
          body: {
            type: 'box',
            layout: 'vertical',
            spacing: 'md',
            backgroundColor: '#ffffff',
            borderColor: '#e0e0e0',
            borderWidth: '2px',
            cornerRadius: 'lg',
            contents: [
              {
                type: 'text',
                text: '‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
                weight: 'bold',
                size: 'md',
                color: '#1976D2',
                align: 'center',
                margin: 'md',
              },
              { type: 'separator', margin: 'md' },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                  { type: 'text', text: borrow.borrow_code || '-', size: 'sm', color: '#222222', flex: 4, weight: 'bold' }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                  { type: 'text', text: borrow.borrower?.name || '-', size: 'sm', color: '#222222', flex: 4 }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á', size: 'sm', color: '#888888', flex: 2 },
                  { type: 'text', text: borrow.borrower?.position || '-', size: 'sm', color: '#222222', flex: 4 }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏™‡∏≤‡∏Ç‡∏≤', size: 'sm', color: '#888888', flex: 2 },
                  { type: 'text', text: borrow.borrower?.department || '-', size: 'sm', color: '#222222', flex: 4 }
                ]
              },
              { type: 'separator', margin: 'md' },
              {
                type: 'text',
                text: 'üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå',
                size: 'sm',
                color: '#1976D2',
                weight: 'bold',
                margin: 'md',
              },
              {
                type: 'text',
                text: equipmentList,
                size: 'sm',
                color: '#222222',
                wrap: true
              },
              { type: 'separator', margin: 'md' },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2 },
                  { type: 'text', text: borrow.borrow_date || '-', size: 'sm', color: '#222222', flex: 4 }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                  { type: 'text', text: borrow.due_date || '-', size: 'sm', color: '#d32f2f', flex: 4, weight: 'bold' }
                ]
              }
            ]
          },
          footer: {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'button',
                style: 'primary',
                color: '#1976D2',
                action: {
                  type: 'uri',
                  label: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                  uri: 'https://your-system-url/borrows/' + borrow.borrow_code
                }
              }
            ]
          }
        }
      };
      // ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ executive
      const executives = await User.getExecutives();
      for (const executive of executives) {
        if (executive.line_id) {
          await sendLineNotify(executive.line_id, flexMessageExecutive);
        }
      }
      // ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ user (‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°)
      // ‡∏î‡∏∂‡∏á line_id ‡∏à‡∏≤‡∏Å user_id ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      const user = await User.findById(borrow.user_id);
      if (user?.line_id) {
        const flexMessageUser = {
          type: 'flex',
          altText: 'üì¢ ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
          contents: {
            type: 'bubble',
            size: 'mega',
            header: {
              type: 'box',
              layout: 'vertical',
              contents: [
                {
                  type: 'text',
                  text: 'üì¶ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
                  weight: 'bold',
                  size: 'xl',
                  color: '#ffffff',
                  align: 'center',
                  margin: 'md',
                }
              ],
              backgroundColor: '#009688',
              paddingAll: '20px',
            },
            body: {
              type: 'box',
              layout: 'vertical',
              spacing: 'md',
              backgroundColor: '#ffffff',
              borderColor: '#e0e0e0',
              borderWidth: '2px',
              cornerRadius: 'lg',
              contents: [
                {
                  type: 'text',
                  text: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£',
                  weight: 'bold',
                  size: 'md',
                  color: '#009688',
                  align: 'center',
                  margin: 'md',
                },
                { type: 'separator', margin: 'md' },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    { type: 'text', text: '‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                    { type: 'text', text: borrow.borrow_code || '-', size: 'sm', color: '#222222', flex: 4, weight: 'bold' }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    { type: 'text', text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2 },
                    { type: 'text', text: borrow.borrow_date || '-', size: 'sm', color: '#222222', flex: 4 }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    { type: 'text', text: '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                    { type: 'text', text: borrow.due_date || '-', size: 'sm', color: '#d32f2f', flex: 4, weight: 'bold' }
                  ]
                },
                { type: 'separator', margin: 'md' },
                {
                  type: 'text',
                  text: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°:',
                  size: 'sm',
                  color: '#009688',
                  weight: 'bold',
                  margin: 'md',
                },
                {
                  type: 'text',
                  text: equipmentList,
                  size: 'sm',
                  color: '#222222',
                  wrap: true
                }
              ]
            },
            footer: {
              type: 'box',
              layout: 'vertical',
              contents: [
                {
                  type: 'button',
                  style: 'primary',
                  color: '#009688',
                  action: {
                    type: 'uri',
                    label: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                    uri: 'https://your-system-url/borrows/' + borrow.borrow_code
                  }
                }
              ]
            }
          }
        };
        console.log('[DEBUG] ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á LINE Notify ‡∏ñ‡∏∂‡∏á user:', user.user_id, user.line_id);
        console.log('[DEBUG] flexMessageUser:', JSON.stringify(flexMessageUser));
        try {
          await sendLineNotify(user.line_id, flexMessageUser);
          console.log('[DEBUG] ‡∏™‡πà‡∏á LINE Notify ‡∏ñ‡∏∂‡∏á user ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (err) {
          console.error('[DEBUG] ‡∏™‡πà‡∏á LINE Notify ‡∏ñ‡∏∂‡∏á user ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err);
        }
      }
    }
    // === ‡πÅ‡∏à‡πâ‡∏á user ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô carry (‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß) ===
    if (status === 'carry') {
      const borrow = await BorrowModel.getBorrowById(id);
      const equipmentList = borrow.equipment.map(eq =>
        `‚Ä¢ ${eq.name} (${eq.item_code}) x${eq.quantity}`
      ).join('\n');
      const user = await User.findById(borrow.user_id);
      if (user?.line_id) {
        // ‡∏£‡∏ß‡∏° location ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏∏‡∏Å‡∏ä‡∏¥‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥)
        const locations = Array.from(new Set(borrow.equipment.map(eq => eq.location).filter(Boolean)));
        const locationText = locations.length > 0 ? locations.join(', ') : '‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏ ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ 1 ‡∏ä‡∏±‡πâ‡∏ô 2';
        const flexMessageUser = {
          type: 'flex',
          altText: 'üì¢ ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
          contents: {
            type: 'bubble',
            size: 'mega',
            header: {
              type: 'box',
              layout: 'vertical',
              contents: [
                {
                  type: 'text',
                  text: 'üì¶ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
                  weight: 'bold',
                  size: 'xl',
                  color: '#ffffff',
                  align: 'center',
                  margin: 'md',
                }
              ],
              backgroundColor: '#388e3c',
              paddingAll: '20px',
            },
            body: {
              type: 'box',
              layout: 'vertical',
              spacing: 'md',
              backgroundColor: '#ffffff',
              borderColor: '#e0e0e0',
              borderWidth: '2px',
              cornerRadius: 'lg',
              contents: [
                {
                  type: 'text',
                  text: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß ',
                  weight: 'bold',
                  size: 'md',
                  color: '#388e3c',
                  align: 'center',
                  margin: 'md',
                },
                { type: 'separator', margin: 'md' },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    { type: 'text', text: '‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                    { type: 'text', text: borrow.borrow_code || '-', size: 'sm', color: '#222222', flex: 4, weight: 'bold' }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    { type: 'text', text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2 },
                    { type: 'text', text: borrow.borrow_date || '-', size: 'sm', color: '#222222', flex: 4 }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    { type: 'text', text: '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                    { type: 'text', text: borrow.due_date || '-', size: 'sm', color: '#d32f2f', flex: 4, weight: 'bold' }
                  ]
                },
                { type: 'separator', margin: 'md' },
                {
                  type: 'text',
                  text: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå: ' + locationText,
                  size: 'sm',
                  color: '#388e3c',
                  weight: 'bold',
                  margin: 'md',
                },
                {
                  type: 'text',
                  text: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°:',
                  size: 'sm',
                  color: '#388e3c',
                  weight: 'bold',
                  margin: 'md',
                },
                {
                  type: 'text',
                  text: equipmentList,
                  size: 'sm',
                  color: '#222222',
                  wrap: true
                }
              ]
            },
            footer: {
              type: 'box',
              layout: 'vertical',
              contents: [
                {
                  type: 'button',
                  style: 'primary',
                  color: '#388e3c',
                  action: {
                    type: 'uri',
                    label: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                    uri: 'https://your-system-url/borrows/' + borrow.borrow_code
                  }
                }
              ]
            }
          }
        };
        console.log('[DEBUG] ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á LINE Notify ‡∏ñ‡∏∂‡∏á user (carry):', user.user_id, user.line_id);
        console.log('[DEBUG] flexMessageUser (carry):', JSON.stringify(flexMessageUser));
        try {
          await sendLineNotify(user.line_id, flexMessageUser);
          console.log('[DEBUG] ‡∏™‡πà‡∏á LINE Notify ‡∏ñ‡∏∂‡∏á user (carry) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (err) {
          console.error('[DEBUG] ‡∏™‡πà‡∏á LINE Notify ‡∏ñ‡∏∂‡∏á user (carry) ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err);
        }
      }
    }
    // === ‡πÅ‡∏à‡πâ‡∏á user ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô rejected (‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥) ===
    if (status === 'rejected') {
      const borrow = await BorrowModel.getBorrowById(id);
      const equipmentList = borrow.equipment.map(eq =>
        `‚Ä¢ ${eq.name} (${eq.item_code}) x${eq.quantity}`
      ).join('\n');
      const user = await User.findById(borrow.user_id);
      if (user?.line_id) {
        const flexMessageUser = {
          type: 'flex',
          altText: 'üì¢ ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
          contents: {
            type: 'bubble',
            size: 'mega',
            header: {
              type: 'box',
              layout: 'vertical',
              contents: [
                {
                  type: 'text',
                  text: '‚ùå ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°',
                  weight: 'bold',
                  size: 'xl',
                  color: '#ffffff',
                  align: 'center',
                  margin: 'md',
                }
              ],
              backgroundColor: '#d32f2f',
              paddingAll: '20px',
            },
            body: {
              type: 'box',
              layout: 'vertical',
              spacing: 'md',
              backgroundColor: '#ffffff',
              borderColor: '#e0e0e0',
              borderWidth: '2px',
              cornerRadius: 'lg',
              contents: [
                {
                  type: 'text',
                  text: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°',
                  weight: 'bold',
                  size: 'md',
                  color: '#d32f2f',
                  align: 'center',
                  margin: 'md',
                },
                ...(borrow.rejection_reason ? [{
                  type: 'text',
                  text: '‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ' + borrow.rejection_reason,
                  size: 'sm',
                  color: '#d32f2f',
                  margin: 'md',
                  wrap: true
                }] : []),
                {
                  type: 'text',
                  text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà',
                  size: 'sm',
                  color: '#d32f2f',
                  weight: 'bold',
                  align: 'center',
                  margin: 'md',
                },
                { type: 'separator', margin: 'md' },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    { type: 'text', text: '‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                    { type: 'text', text: borrow.borrow_code || '-', size: 'sm', color: '#222222', flex: 4, weight: 'bold' }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    { type: 'text', text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°', size: 'sm', color: '#888888', flex: 2 },
                    { type: 'text', text: borrow.borrow_date || '-', size: 'sm', color: '#222222', flex: 4 }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    { type: 'text', text: '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô', size: 'sm', color: '#888888', flex: 2, weight: 'bold' },
                    { type: 'text', text: borrow.due_date || '-', size: 'sm', color: '#d32f2f', flex: 4, weight: 'bold' }
                  ]
                },
                { type: 'separator', margin: 'md' },
                {
                  type: 'text',
                  text: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°:',
                  size: 'sm',
                  color: '#d32f2f',
                  weight: 'bold',
                  margin: 'md',
                },
                {
                  type: 'text',
                  text: equipmentList,
                  size: 'sm',
                  color: '#222222',
                  wrap: true
                }
              ]
            },
            footer: {
              type: 'box',
              layout: 'vertical',
              contents: [
                {
                  type: 'button',
                  style: 'primary',
                  color: '#d32f2f',
                  action: {
                    type: 'uri',
                    label: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                    uri: 'https://your-system-url/borrows/' + borrow.borrow_code
                  }
                }
              ]
            }
          }
        };
        // const user = await User.findById(borrow.user_id); // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
        // if (user?.line_id) { // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
        //   await sendLineNotify(user.line_id, flexMessageUser); // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
        // }
      }
    }
    // ‡∏•‡∏ö‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö waiting_payment ‡πÅ‡∏•‡∏∞ completed ‡∏≠‡∏≠‡∏Å (‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ handle ‡∏ó‡∏µ‡πà returnController.js ‡πÅ‡∏•‡πâ‡∏ß)
    // === ‡∏•‡∏ö‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö completed (‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô returnController.js) ===

    res.json({ affectedRows, signaturePath });
  } catch (err) {
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: err.message });
  }
};

// ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
export const deleteBorrow = async (req, res) => {
  const { id } = req.params;
  try {
    await BorrowModel.deleteBorrow(id);
    res.json({ message: '‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: err.message });
  }
};